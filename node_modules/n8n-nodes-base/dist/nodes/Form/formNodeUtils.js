"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderFormNode = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const utils_1 = require("./utils");
const renderFormNode = async (context, res, trigger, fields, mode) => {
    const options = context.getNodeParameter('options', {});
    let title = options.formTitle;
    if (!title) {
        title = context.evaluateExpression(`{{ $('${trigger?.name}').params.formTitle }}`);
    }
    let description = options.formDescription;
    if (!description) {
        description = context.evaluateExpression(`{{ $('${trigger?.name}').params.formDescription }}`);
    }
    let buttonLabel = options.buttonLabel;
    if (!buttonLabel) {
        buttonLabel =
            context.evaluateExpression(`{{ $('${trigger?.name}').params.options?.buttonLabel }}`) || 'Submit';
    }
    const responseMode = 'onReceived';
    let redirectUrl;
    const connectedNodes = context.getChildNodes(context.getNode().name);
    const hasNextPage = connectedNodes.some((node) => !node.disabled && (node.type === n8n_workflow_1.FORM_NODE_TYPE || node.type === n8n_workflow_1.WAIT_NODE_TYPE));
    if (hasNextPage) {
        redirectUrl = context.evaluateExpression('{{ $execution.resumeFormUrl }}');
    }
    const appendAttribution = context.evaluateExpression(`{{ $('${trigger?.name}').params.options?.appendAttribution === false ? false : true }}`);
    (0, utils_1.renderForm)({
        context,
        res,
        formTitle: title,
        formDescription: description,
        formFields: fields,
        responseMode,
        mode,
        redirectUrl,
        appendAttribution,
        buttonLabel,
    });
    return {
        noWebhookResponse: true,
    };
};
exports.renderFormNode = renderFormNode;
//# sourceMappingURL=formNodeUtils.js.map